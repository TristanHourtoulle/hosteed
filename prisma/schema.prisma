generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TypeRent {
  id          String    @id @default(cuid())
  name        String
  description String
  products    Product[]
}

model Equipment {
  id       String    @id @default(cuid())
  name     String
  products Product[] @relation("EquipmentToProduct")
}

model Services {
  id       String    @id @default(cuid())
  name     String
  products Product[] @relation("ProductToServices")
}

model Meals {
  id       String    @id @default(cuid())
  name     String
  products Product[] @relation("MealsToProduct")
}

model TypeRoom {
  id          String    @id @default(cuid())
  name        String
  description String
  products    Product[] @relation("ProductToTypeRoom")
}

model Security {
  id       String    @id @default(cuid())
  name     String
  products Product[] @relation("ProductToSecurity")
}

model Product {
  id                       String            @id @default(cuid())
  name                     String
  description              String
  address                  String
  basePrice                String
  room                     BigInt?
  bathroom                 BigInt?
  arriving                 Int
  leaving                  Int
  autoAccept               Boolean
  equipement               BigInt?
  meal                     BigInt?
  services                 BigInt?
  security                 BigInt?
  minRent                  BigInt?
  maxRent                  BigInt?
  advanceRent              BigInt?
  delayTime                BigInt?
  categories               BigInt
  minPeople                BigInt?
  maxPeople                BigInt?
  commission               Int               @default(0)
  validate                 ProductValidation @default(NotVerified)
  userManager              BigInt
  typeId                   String
  phone                    String
  latitude                 Float
  longitude                Float
  certified                Boolean           @default(false)
  contract                 Boolean           @default(false)
  sizeRoom                 Int?
  isCertificated           Boolean           @default(false)
  certificatedDate         DateTime?
  certificatedBy           String?
  certificatedUserRelation User?             @relation(fields: [certificatedBy], references: [id], onDelete: Cascade, name: "CertificationUserBy")
  options                  Options[]
  type                     TypeRent          @relation(fields: [typeId], references: [id])
  user                     User[]
  rents                    Rent[]
  reviews                  Review[]
  specificPrices           SpecificPrices[]
  specificRequests         SpecificRequest[]
  equipments               Equipment[]       @relation("EquipmentToProduct")
  img                      Images[]          @relation("ImagesToProduct")
  mealsList                Meals[]           @relation("MealsToProduct")
  securities               Security[]        @relation("ProductToSecurity")
  servicesList             Services[]        @relation("ProductToServices")
  typeRoom                 TypeRoom[]        @relation("ProductToTypeRoom")
  discount                 Discount[]
  Chat                     Chat[]

  UnAvailableProduct UnAvailableProduct[]
}

model Discount {
  id            String   @id @default(cuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  startDiscount DateTime
  endDiscount   DateTime
  price         Int
}

model Images {
  id      String    @id @default(cuid())
  img     String
  Product Product[] @relation("ImagesToProduct")
}

model SpecificPrices {
  id        String  @id @default(cuid())
  productId String
  day       BigInt
  price     BigInt
  active    BigInt
  product   Product @relation(fields: [productId], references: [id])
}

model SpecificRequest {
  id        String  @id @default(cuid())
  productId String
  name      String
  text      String
  product   Product @relation(fields: [productId], references: [id])
}

model Options {
  id        String  @id @default(cuid())
  productId String
  name      String
  price     BigInt
  type      BigInt
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  Rent      Rent[]  @relation("OptionsToRent")
}

model Rent {
  id           String        @id @default(cuid())
  stripeId     String?
  productId    String
  userId       String
  numberPeople BigInt
  notes        BigInt
  accepted     Boolean
  prices       BigInt
  arrivingDate DateTime
  leavingDate  DateTime
  payment      PaymentStatus @default(NOT_PAID)
  product      Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  options      Options[]     @relation("OptionsToRent")
  status       RentStatus    @default(WAITING)
  confirmed    Boolean       @default(false)
  Review       Review[]
  DisableRent  DisableRent[]

  PayRequest PayRequest[]
}

model UnAvailableProduct {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model DisableRent {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  rentId    String
  rent      Rent     @relation(fields: [rentId], references: [id], onDelete: Cascade)
}

model Review {
  id           String   @id @default(cuid())
  productId    String
  title        String
  text         String
  grade        Int
  welcomeGrade Int      @default(0)
  staff        Int      @default(0)
  comfort      Int      @default(0)
  equipment    Int      @default(0)
  cleaning     Int      @default(0)
  visitDate    DateTime
  publishDate  DateTime
  rentId       String
  approved     Boolean  @default(false)
  rentRelation Rent     @relation(fields: [rentId], references: [id], onDelete: Cascade)
  product      Product  @relation(fields: [productId], references: [id])
}

model User {
  id                       String          @id @default(cuid())
  name                     String?
  email                    String          @unique
  emailVerified            DateTime?
  emailToken               String?
  resetToken               String?
  image                    String?
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
  info                     String?
  lastname                 String?
  password                 String?
  profilePicture           String?
  stripeCustomerId         String?
  roles                    UserRole        @default(USER)
  accounts                 Account[]
  Authenticator            Authenticator[]
  Rent                     Rent[]
  sessions                 Session[]
  Product                  Product[]
  Chat                     Chat[]
  PayRequest               PayRequest[]
  CertificationProductUser Product[]       @relation(name: "CertificationUserBy")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Chat {
  id         String   @unique @default(cuid())
  message    String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  dateSended DateTime
}

model PayRequest {
  id             String           @unique @default(cuid())
  userId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  rentId         String
  rent           Rent             @relation(fields: [rentId], references: [id], onDelete: Cascade)
  PaymentRequest PaymentStatus
  prices         String
  notes          String
  method         PaymentMethod
  status         PaymentReqStatus
}

enum PaymentReqStatus {
  RECEIVED
  REFUSED
  DONE
}

enum PaymentMethod {
  SEPA_VIREMENT
  TAPTAP
  PAYPAL
  INTERNATIONAL
  OTHER
}

enum UserRole {
  ADMIN
  BLOGWRITTER
  HOST
  USER
}

enum PaymentStatus {
  NOT_PAID
  CLIENT_PAID
  MID_TRANSFER_REQ
  MID_TRANSFER_DONE
  REST_TRANSFER_REQ
  REST_TRANSFER_DONE
  FULL_TRANSFER_REQ
  FULL_TRANSFER_DONE
  REFUNDED
  DISPUTE
}

enum RentStatus {
  WAITING
  RESERVED
  CHECKIN
  CHECKOUT
  CANCEL
}

enum ProductValidation {
  NotVerified
  Approve
  Refused
  RecheckRequest
}
